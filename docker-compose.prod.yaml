version: "3.9"

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: django-backend
    command: >
      sh -c "python manage.py collectstatic --noinput &&
             python manage.py migrate &&
             gunicorn backend.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
    env_file:
      - ./backend/.env.prod
    depends_on:
      - db
    expose:
      - "8000"

  frontend:
    build:
      context: ./frontend
    container_name: vite-frontend
    command: npm run build
    volumes:
      - ./frontend:/app
    environment:
      - NODE_ENV=production

  nginx:
    image: nginx:latest
    container_name: nginx-proxy
    restart: always
    depends_on:
      - backend
      - frontend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/ssl:/etc/letsencrypt
      - ./nginx/ssl-dhparam:/etc/ssl/certs
      - static_volume:/app/static
      - media_volume:/app/media
      - ./frontend/dist:/usr/share/nginx/html

  certbot:
    image: certbot/certbot:latest
    container_name: certbot
    volumes:
      - ./nginx/ssl:/etc/letsencrypt
      - ./nginx/ssl-dhparam:/etc/ssl/certs
      - ./nginx/letsencrypt:/var/www/certbot
    command: >
      certonly --webroot --webroot-path=/var/www/certbot
      --email you@example.com
      --agree-tos
      --no-eff-email
      -d yourdomain.com
      -d www.yourdomain.com

  db:
    image: postgres:16
    container_name: postgres-db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: app_db
    volumes:
      - pgdata:/var/lib/postgresql/data
    expose:
      - "5432"

volumes:
  pgdata:
  static_volume:
  media_volume: